<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dev-Mex - devops</title><link href="https://mvaldes14.github.io/blog/" rel="alternate"></link><link href="https://mvaldes14.github.io/blog/feeds/devops.atom.xml" rel="self"></link><id>https://mvaldes14.github.io/blog/</id><updated>2020-03-18T00:00:00-05:00</updated><subtitle>IT Things.</subtitle><entry><title>COVID Data in Elasticsearch &amp;Â Kibana</title><link href="https://mvaldes14.github.io/blog/covid-elk.html" rel="alternate"></link><published>2020-03-18T00:00:00-05:00</published><updated>2020-03-18T00:00:00-05:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2020-03-18:/blog/covid-elk.html</id><summary type="html">&lt;p&gt;So as most people I&amp;#8217;ve been stuck at home so it gave me some extra time to tinker around the&amp;nbsp;dataset&lt;/p&gt;</summary><content type="html">&lt;p&gt;So as most people I&amp;#8217;ve been stuck at home so it gave me some extra time to tinker around the dataset on the excellent dashboard by &lt;a href="[https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6](https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6)"&gt;Johns Hopkins &lt;span class="caps"&gt;CSSE&lt;/span&gt;&lt;/a&gt; you should check that out if you haven&amp;#8217;t already, it&amp;#8217;s quite popular. Anyways found out that they publish all of the data behind the dashboard to their &lt;a href="[https://github.com/CSSEGISandData/COVID-19](https://github.com/CSSEGISandData/COVID-19)"&gt;Github&lt;/a&gt; so wrote a quick script to pull the csv files for March, transform the data via Logstash and push it into my local Elasticsearch&amp;nbsp;instance.&lt;/p&gt;
&lt;h2 id="getting-and-formatting-data"&gt;Getting and formatting&amp;nbsp;data&lt;/h2&gt;
&lt;h3 id="pulling-data"&gt;Pulling&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;With the help of the python &lt;code&gt;requests&lt;/code&gt; library it was simple to pull the data for each day and just dump it into a file so that i could later tweak&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Downloads the files from the REPO and places them in the data/raw folder&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/&lt;/span&gt;&lt;span class="si"&gt;{day}&lt;/span&gt;&lt;span class="s2"&gt;.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/raw/&lt;/span&gt;&lt;span class="si"&gt;{day}&lt;/span&gt;&lt;span class="s1"&gt;-raw.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="formatting-the-data"&gt;Formatting the&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;While reviewing the csv data, I noticed that there were &amp;#8220;gaps&amp;#8221; in between lines for some records, mostly missing states or province so I just read each line and if the province was missing, I copied whatever the line had for&amp;nbsp;Country.&lt;/p&gt;
&lt;p&gt;&lt;img alt="covid-github" src="https://mvaldes14.github.io/blog/images/posts/covid-github.png"&gt;&lt;/p&gt;
&lt;p&gt;Quite simple to do with the csv DictReader&amp;nbsp;function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Swaps the column order and fills out missing data for countries and states&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/raw/&lt;/span&gt;&lt;span class="si"&gt;{day}&lt;/span&gt;&lt;span class="s1"&gt;-raw.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8-sig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/&lt;/span&gt;&lt;span class="si"&gt;{day}&lt;/span&gt;&lt;span class="s1"&gt;.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Country/Region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Province/State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Last Update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Deaths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Recovered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Latitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                      &lt;span class="c1"&gt;# Add Country if it doesn&amp;#39;t exist&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Province/State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
               &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Province/State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Country/Region&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the columns swapped and consistent, I had something nice and&amp;nbsp;manageable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Country/Region,Province/State,LastUpdate,Confirmed,Deaths,Recovered,Latitude,Longitude&lt;/span&gt;
&lt;span class="err"&gt;China,Hubei,2020-03-17T11:53:10,67799,3111,56003,30.9756,112.2707&lt;/span&gt;
&lt;span class="err"&gt;Italy,Italy,2020-03-17T18:33:02,31506,2503,2941,41.8719,12.5674&lt;/span&gt;
&lt;span class="err"&gt;Iran,Iran,2020-03-17T15:13:09,16169,988,5389,32.4279,53.6880&lt;/span&gt;
&lt;span class="err"&gt;Spain,Spain,2020-03-17T20:53:02,11748,533,1028,40.4637,-3.7492&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pushing-the-data-to-elasticsearch"&gt;Pushing the data to&amp;nbsp;Elasticsearch&lt;/h3&gt;
&lt;p&gt;There are multiple ways to push data into an Elasticsearch instance, in previous posts I&amp;#8217;ve done it with the python library but I had a Logstash instance up and running so figured it was easier to use it to read all csv files in my desired location, run it through some of the filters and push it into the cluster for me if you are familiar with how Logstash work you can skip the&amp;nbsp;breakdown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;ELI5&lt;/span&gt; Logstash - Tool used to transform data, it basically consists of 3 blocks. An input to read data from. A filter to transform or alter the data. An output to send the transformed data&amp;nbsp;to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, we have to tell Logstash what we want to read since we had static files all I had to do was use the file module, all it requires is a path to read from. To prevent it from reading the files over and over it employs a &amp;#8220;tracker&amp;#8221; that keeps a record of which files were read up until what position. Filebeat does exactly the same and it keeps an internal&amp;nbsp;registry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/&amp;lt;user&amp;gt;/projects/covid-dashboard/data/*.csv&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;start_position&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;beginning&amp;quot;&lt;/span&gt;
   &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;covid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dataset&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;sincedb_path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/&amp;lt;user&amp;gt;/projects/covid-dashboard/tracker&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next up we have to run every single record from each file through a series of filters, from decoding to changing the type of data so it can be used in&amp;nbsp;Elasticsearch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;LastUpdate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Deaths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Recovered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Latitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Longitude&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="n"&gt;skip_header&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
   &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Deaths&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;LastUpdate&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date_time&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Recovered&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Longitude&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;float&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Latitude&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;float&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;mutate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Longitude&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[Location][lon]&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Latitude&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[Location][lat]&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;remove_field&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;span class="caps"&gt;CSV&lt;/span&gt; block simply decodes each line and turns all of the records into Key-Value pairs, then uses the custom headers I wanted to name those keys. The second part turns some of the fields into integers and dates, I do want to point out that this didn&amp;#8217;t work 100% of the time so I had to do a workaround at Elasticsearch which will be posted in here as well.
The mutate block creates a &amp;#8220;geo_point&amp;#8221; object that is a nested object that contains a latitude and longitude. It also removes some fields I didn&amp;#8217;t feel were&amp;nbsp;needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;elasticsearch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:9200&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;covid&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we push out the data to Elasticsearch to an index called&amp;nbsp;&amp;#8220;covid&amp;#8221;.&lt;/p&gt;
&lt;h3 id="adjust-the-data-in-elasticsearch"&gt;Adjust the data in&amp;nbsp;Elasticsearch&lt;/h3&gt;
&lt;p&gt;As mentioned above, I kept running into issues where some records could not be indexed cause of data type mismatch so after trying for couple hours ended up forcing Elasticsearch to do what I wanted by creating the mapping directly and applying it to the &amp;#8220;covid&amp;#8221; index. Templates are an Elasticsearch concept that&amp;#8217;s incredibly powerful and everyone using it should know about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;My template ends up looking&amp;nbsp;like&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;PUT&lt;/span&gt; &lt;span class="err"&gt;_template/covid&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;order&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;index_patterns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;covid&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;number_of_replicas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;Location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;geo_point&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;double&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;Deaths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;double&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;LastUpdate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;Recovered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;double&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see I&amp;#8217;m merely indicating how the data should look like in terms of the&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;With that in place, it was time to run Logstash and start pushing all 3k+ records, each record ended up looking&amp;nbsp;like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;_index&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;covid&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;_type&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_doc&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9O8I73ABTHN1r9G_vStK&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;_score&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;_source&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Recovered&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;917&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;State&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Anhui&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Deaths&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;LastUpdate&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2020-03-02T15:03:23&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;covid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dataset&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Country&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mainland China&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lat&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;31.8257&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lon&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;117.2264&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="exploring-the-data"&gt;Exploring the&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;With all of March records so far we can now start exploring the data, in my case I consume things visually so the first thing I did was to start plotting.
I was curious to see how the number of confirmed cases spike in Italy so why not put it in a line chart?. It took off incredibly&amp;nbsp;fast.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coivd-italy" src="https://mvaldes14.github.io/blog/static/posts/covid-italy.png"&gt;&lt;/p&gt;
&lt;p&gt;I know that most of the casualties occurred in Washington State so the data in a&amp;nbsp;heatmap.&lt;/p&gt;
&lt;p&gt;&lt;img alt="covid-deaths" src="https://mvaldes14.github.io/blog/static/posts/covid-deaths.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, since we have coordinate we could, in theory, replicate some of the dashboards from Johns Hopkins, I&amp;#8217;m aware the data needs tweaking to fully be a copy but this sort of gives us an&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;&lt;img alt="covid-map" src="https://mvaldes14.github.io/blog/static/posts/covid-map.png"&gt;&lt;/p&gt;
&lt;p&gt;With all records, you can explore further and ask all sorts of questions on which states have more cases, which ones are &amp;#8220;safe&amp;#8221; or quiet. If you are smart you could, use the data to start predicting how the numbers will look like in the coming&amp;nbsp;weeks.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As always, hoped this kept you busy for a bit, I know it took me a couple hours to bootstrap this whole thing and play with the&amp;nbsp;data/script.&lt;/p&gt;
&lt;p&gt;If you have any questions reach out on social media - the repo for everything in this post can be found in &lt;a href="[https://github.com/mvaldes14/covid-dashboard](https://github.com/mvaldes14/covid-dashboard)"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last thing&amp;#8230; &lt;strong&gt;Stay at home folks and tend to your families, don&amp;#8217;t be a&amp;nbsp;dick.&lt;/strong&gt;&lt;/p&gt;</content><category term="devops"></category><category term="elasticsearch"></category><category term="kibana"></category></entry><entry><title>Traefik QuickÂ Start</title><link href="https://mvaldes14.github.io/blog/traefik-quickstart.html" rel="alternate"></link><published>2020-03-13T00:00:00-05:00</published><updated>2020-03-13T00:00:00-05:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2020-03-13:/blog/traefik-quickstart.html</id><summary type="html">&lt;p&gt;In my previous post talked about how I ended up using Traefik instead of the good ol&amp;#8217; reliable &lt;span class="caps"&gt;NGINX&lt;/span&gt;, so wanted to expand a bit more for people that may want to test this out and not want to spend hours as i did testing and reading documentation, not saying you shouldn&amp;#8217;t cause you definitely will but if you want something quick, then this guide is for&amp;nbsp;you.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my previous &lt;a href="https://mvaldes14.github.io/blog/docker-home-setup.html"&gt;post&lt;/a&gt; talked about how i ended up using Traefik instead of the good ol&amp;#8217; reliable &lt;span class="caps"&gt;NGINX&lt;/span&gt;, so wanted to expand a bit more for people that may want to test this out and not want to spend hours like i did testing and reading documentation, not saying you shouldn&amp;#8217;t cause you definitely will but if you want something quick, then this guide is for&amp;nbsp;you.&lt;/p&gt;
&lt;h2 id="create-your-network"&gt;Create your&amp;nbsp;network&lt;/h2&gt;
&lt;p&gt;All containers that Traefik will expose need to be on the same network so if you are using something like swarm or compose, make sure you have an &amp;#8220;external&amp;#8221; network that all containers can&amp;nbsp;reach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;NOTE&lt;/span&gt;&lt;/strong&gt;: By default, all compose files that do not define a network will end up generating a network that will have the name of the first service in your file, this is useful so that everything in that compose file can talk to each other but in our case, it just pollutes our docker engine with more stuff to&amp;nbsp;manage.&lt;/p&gt;
&lt;p&gt;Create your overlay or bridged&amp;nbsp;network&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;SWARM&lt;/span&gt;
&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="c1"&gt;--driver overlay&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;No&lt;/span&gt; &lt;span class="n"&gt;SWARM&lt;/span&gt;
&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setup-traefik"&gt;Setup&amp;nbsp;Traefik&lt;/h2&gt;
&lt;p&gt;Traefik relies heavily configurations on either a static file that you can mount to it or by using labels, which I honestly prefer (this is referred to as dynamic configuration by&amp;nbsp;them).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--entrypoints.metrics.address=:8082&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--entrypoints.http.address=:80&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--api.dashboard=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--api.insecure=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker.swarmMode=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker.exposedByDefault=false&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8082&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8082&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;placement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;role&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;

&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A quick breakdown of what these mean. A more detailed explanation can be found on the documentation - &lt;a href="https://docs.traefik.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Indicates that the service will use the network called&amp;nbsp;&amp;#8220;traefik-proxy&amp;#8221;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;networks: - traefik-proxy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define an &amp;#8220;entrypoint&amp;#8221; aka a port that we can hit to reach a service, and we name it &amp;#8220;http&amp;#8221; since its using port&amp;nbsp;80.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- --entrypoints.http.address=:80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traefik comes with a nice dashboard that helps you visualize what is running and the health of the services behind it, I recommend using it. So this line just enables it and allows you to reach it without using&amp;nbsp;authentication&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- --api.dashboard=true`&lt;/span&gt;
&lt;span class="err"&gt;- --api.insecure=true`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since we are running this in a docker container we need to tell traefik to listen to events in the engine, so we enable&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- --providers.docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In my case I run everything in &lt;span class="caps"&gt;SWARM&lt;/span&gt; mode so I need to enable the mode, if you are not, you can skip&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- --providers.docker.swarmMode=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, by default Traefik will try to match the containers against certain rules so it can expose those services, and since I didn&amp;#8217;t want to expose everything I had to turn this off. If you don&amp;#8217;t do this you will see warning messages in your container logs about not having default rules set for every&amp;nbsp;service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- --providers.docker.exposedByDefault=false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To allow Traefik to listen in to the events for all of your containers we need to share the docker&amp;nbsp;socket.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;volumes: - /var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally since we have an external network created we need to indicate that we want to use&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that, we have our configuration set, now to configure a&amp;nbsp;service&lt;/p&gt;
&lt;h2 id="setup-your-services"&gt;Setup your&amp;nbsp;services&lt;/h2&gt;
&lt;p&gt;In the example, we will be setting up a Grafana&amp;nbsp;instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;3.3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;GF_SECURITY_ADMIN_PASSWORD=SuperSecretPasswordMan&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grafana&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;placement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
      &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.enable=true&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.routers.grafana.entrypoints=http&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.routers.grafana.rule=Host(`grafana.local.net`)&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.services.grafana.loadbalancer.server.port=3000&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.docker.network=traefik-proxy&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another breakdown. Same as before all of the configuration can be done via labels, which makes traefik so cool to&amp;nbsp;use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First thing, we run the service in the network where traefik can reach&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;networks: - traefik-proxy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We allow traefik to route the traffic for this&amp;nbsp;service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- &amp;quot;traefik.enable=true&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indicate which entrypoint your service will use, do note that each route you define must be unique, in the example I called the route &amp;#8220;grafana&amp;#8221; so replace it in your configuration as&amp;nbsp;needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;traefik.http.routers.grafana.entrypoints=http&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The name of the route that will be used to redirect your request to the service, in my case i have a &amp;#8220;local.net&amp;#8221; domain running so i ended up just giving each service a naming convention of&amp;nbsp;&amp;#8220;service_name.local.net&amp;#8221;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;traefik.http.routers.grafana.rule=Host(`grafana.local.net`)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most services expose a port so we have to tell traefik which port will be used to redirect the traffic to, Grafana does it at port&amp;nbsp;3000.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;traefik.http.services.grafana.loadbalancer.server.port=3000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bit redundant but we indicate the network we are using this one as a&amp;nbsp;label.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;traefik.docker.network=traefik-proxy&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, force the entire service to use an already defined external&amp;nbsp;network.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="validation"&gt;Validation&lt;/h2&gt;
&lt;p&gt;With traefik and our grafana service deployed and running, we can now validate with the built-in dashboard to see if our instance was picked up properly as&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="traefik-dashboard" src="https://mvaldes14.github.io/blog/images/posts/traefik-dashboard.png"&gt;&lt;/p&gt;
&lt;p&gt;Our service in detail, the route and the&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;&lt;img alt="grafana-traefik" src="https://mvaldes14.github.io/blog/images/posts/grafana-traefik.png"&gt;&lt;/p&gt;
&lt;p&gt;In our browser, if we navigate to &lt;code&gt;http://grafana.local.net&lt;/code&gt; we should in theory now be presented with the default grafana setup. In case you don&amp;#8217;t see it you might have &lt;span class="caps"&gt;DNS&lt;/span&gt; problems, the easy workaround is to add the name of the site to your &lt;code&gt;http://localhost&lt;/code&gt; so it resolves the&amp;nbsp;traffic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# /etc/hosts&lt;/span&gt;
&lt;span class="err"&gt;127.0.0.1 localhost grafana.local.net&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run your own &lt;span class="caps"&gt;DNS&lt;/span&gt; server like me you can simply add a &lt;span class="caps"&gt;CNAME&lt;/span&gt; record that points to the server that hosts the service, done properly you should&amp;nbsp;see.&lt;/p&gt;
&lt;p&gt;&lt;img alt="grafana-dashboard" src="https://mvaldes14.github.io/blog/images/posts/grafana-dashboard.png"&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hope the mini-guide helped you out on how to set up your services, once you have one running it should be easy to replicate by simply copying the configuration and replacing couple values. The traefik documentation also provides a couple of examples in case you wanted to have your routes setup like &lt;code&gt;domain-name.com/grafana&lt;/code&gt;. Finally, you could also have some middleware for your services in case you want to put some authentication before a user can get to your service which is always a good idea if you end up running things for a bigger group or &lt;span class="caps"&gt;PROD&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Then again I&amp;#8217;m the only one that uses these at home so why bother&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;As always if you have questions you can reach out to me on social&amp;nbsp;media.&lt;/p&gt;</content><category term="devops"></category><category term="docker"></category></entry><entry><title>My Home DockerÂ Setup</title><link href="https://mvaldes14.github.io/blog/docker-home-setup.html" rel="alternate"></link><published>2020-03-04T00:00:00-06:00</published><updated>2020-03-04T00:00:00-06:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2020-03-04:/blog/docker-home-setup.html</id><summary type="html">&lt;p&gt;Recently decided to migrate all of the things that I run on my personal computer and a little server I got for Xmas (originally for &lt;span class="caps"&gt;PLEX&lt;/span&gt;) as well as my raspberry pi to docker containers so that I could experiment more with it and boy, not as easy as I thought it was going to&amp;nbsp;be.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently decided to migrate all of the things that I run on my personal computer and a little server I got for Xmas (originally for &lt;span class="caps"&gt;PLEX&lt;/span&gt;) as well as my raspberry pi to docker containers so that I could experiment more with it and boy, not as easy as I thought it was going to&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;Most of the applications had specific configuration files in a location that needed to be mounted somewhere, then I had to think of which apps to move to which node cause of the resources on each node, setup the permissions and respective volumes depending on the usage, all in all, it was fun and I learned a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;One last thing was that I knew very little how the networking aspect worked so I had to create networks between some of these so that I could have communication between them. For instance, the Kibana instance for my elastic cluster has a cross-cluster search so I can visualize the data from both clusters in a single pane so I had to figure out how to make these connections to each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;NOTE&lt;/span&gt;: Everything in here is using Docker &lt;span class="caps"&gt;SWARM&lt;/span&gt;, so make sure you have your swarm&amp;nbsp;setup.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="containers"&gt;Containers:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elasticsearch&amp;nbsp;clusters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Home cluster - for things I play with (trump twitter data, couple indices that are used for an app Iâm working on, etc.). The home cluster comes with an instance of Logstash and Kibana&amp;nbsp;respectfully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server cluster - for reading data that is being generated by a script I made (mostly to keep track of my internet speed, pihole logs), this cluster consists of a gateway node and a data node. One receives the traffic, the other one keeps the&amp;nbsp;data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Guacamole&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used to remote access my servers that are online&amp;nbsp;24/7.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kafka &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Zookeeper&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Been playing with it a lot lately, not much else to say. Definitely a cool&amp;nbsp;tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;LDAP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to have some of my services use this as an authentication backend but havenât had the time to create the schemas and add users, but its&amp;nbsp;running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Media&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Couple containers to keep track of series and &lt;span class="caps"&gt;TV&lt;/span&gt; shows I watch ( sonarr, radarr, jackett&amp;nbsp;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local database so I can dump data sets for me to play&amp;nbsp;with.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Organizr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An excellent application that allows you to manage all of your bookmarks, so now I can just click on an icon and Iâm taken to a&amp;nbsp;container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Portainer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used to manage most of my stack, sometimes the GUIs are better than the&amp;nbsp;terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prometheus &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Grafana&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To collect and graph all of the metrics from my&amp;nbsp;systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Traefik&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reverse proxy for my containers, no longer have to remember IPs and&amp;nbsp;ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Got couple more services running on the servers but due to hardware constraints, mostly video decoding for plex, those remain as system processes that I can turn on/off when&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;Same as my PiHole, I found that its easier to just keep it running on my raspberry pi. Might move it to a container soon using&amp;nbsp;mcvlan.&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Most containers need couple gigs of storage and some donât require a thing as long as they have a mount for the config file so based on that I ended up creating a couple of mount points as&amp;nbsp;follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/opt/elasticsearch&lt;/code&gt; &lt;code&gt;50GB&lt;/code&gt; on both home and server nodes to allocate the index&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/prometheus&lt;/code&gt; &lt;code&gt;1GB&lt;/code&gt; to hold the &lt;code&gt;prometheus.yml&lt;/code&gt; required for the scrape targets as well as hosting the time series data collected, by default I have it to only collect a week worth of&amp;nbsp;metrics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/kafka&lt;/code&gt; &lt;code&gt;500MB&lt;/code&gt; for all of the topic data, couple gigs, nothing&amp;nbsp;special.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/grafana&lt;/code&gt; &lt;code&gt;150MB&lt;/code&gt; to hold the configuration data, one key thing for this one is that the mount point has to be owned by a unique &lt;span class="caps"&gt;ID&lt;/span&gt; for it to work properly, something odd but to be on the lookout&amp;nbsp;for.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/media&lt;/code&gt; &lt;code&gt;250MB&lt;/code&gt; for all of the configurations created by the containers cause I didn&amp;#8217;t want to setup APIs every time i needed those&amp;nbsp;services.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/mysql&lt;/code&gt; &lt;code&gt;500MB&lt;/code&gt; to hold all of my local&amp;nbsp;databases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="networks"&gt;Networks&lt;/h3&gt;
&lt;p&gt;The final step was to figure out a way for some of these to talk to each other, was going to use &lt;span class="caps"&gt;NGINX&lt;/span&gt; but kept seeing âTraefikâ in Reddit so I figured Iâd give it a shotâ¦. after couple hours of trying and reading, got it to work in a way that makes sense to me and best of all I could integrate it perfectly with &lt;code&gt;organizr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Traefik requires you to run all of the containers you want to route the traffic to be on the same network, which is easy with&amp;nbsp;docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker network create traefik-proxy --driver overlay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that setup, all you have to do is define the network in your compose&amp;nbsp;files.&lt;/p&gt;
&lt;h3 id="compose-files"&gt;Compose&amp;nbsp;Files&lt;/h3&gt;
&lt;p&gt;Since I have a bunch of containers and to give you an idea Iâm only going to show you couple examples, if you would like to see all configs feel free to reach out on social media (details at the&amp;nbsp;bottom).&lt;/p&gt;
&lt;p&gt;As a reminder, I got 3 Nodes in Docker Swarm mode with node labels so that I can force docker to run the containers on specific nodes based on the hardware requirements behind&amp;nbsp;them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ docker node inspect manjaro-server &lt;span class="p"&gt;|&lt;/span&gt; jq .&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.Spec.Labels.name
&lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;
$ docker node inspect manjaro-home &lt;span class="p"&gt;|&lt;/span&gt; jq .&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.Spec.Labels.name
&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;
$ docker node inspect pi &lt;span class="p"&gt;|&lt;/span&gt; jq .&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.Spec.Labels.name
&lt;span class="s2"&gt;&amp;quot;pi&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Traefik&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The documentation suggests you run traefik on your master node so it can control and view all of the container events so I&amp;#8217;ve forced it to run on the manager node all the&amp;nbsp;time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--entrypoints.metrics.address=:8082&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--entrypoints.http.address=:80&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--api.dashboard=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--api.insecure=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker.swarmMode=true&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="c1"&gt;--providers.docker.exposedByDefault=false&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8082&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8082&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;placement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;role&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;

&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Guacamole&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running this as well on the node that is 24/7 so i can access it remotely whenever i&amp;nbsp;want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;guacamole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oznu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;guacamole&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;guacamole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
    &lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;placement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
      &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.enable=true&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.routers.guacamole.entrypoints=http&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.routers.guacamole.rule=Host(`guacamole.local.net`)&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.http.services.guacamole.loadbalancer.server.port=8080&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;traefik.docker.network=traefik-proxy&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;traefik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With a couple compose files pushed to a private &lt;span class="caps"&gt;GIT&lt;/span&gt; repo (mostly for sensitive data on the configurations, need to learn how to use docker secrets) my stack is fully automated, now with an ansible playbook I can have the same setup in&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;Again, this was a long task and I did learn a lot on how to debug and troubleshoot mostly networking problems with containers and being my first real project that used docker-compose it was good&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;I hope you liked it, until next time,&amp;nbsp;Adios.&lt;/p&gt;</content><category term="devops"></category><category term="docker"></category></entry><entry><title>Bootstrap your system withÂ ansible</title><link href="https://mvaldes14.github.io/blog/ansible-boostrap.html" rel="alternate"></link><published>2019-08-20T00:00:00-05:00</published><updated>2019-08-20T00:00:00-05:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2019-08-20:/blog/ansible-boostrap.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been distro hoping for a month or so now trying to find the perfect balance between productivity and ease of&amp;nbsp;use&amp;#8230;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been distro hoping for a month or so now trying to find the perfect balance between productivity and ease of use as well as aesthetics so i could feel comfortable using my computer for more than just messing around (Ended up staying with Manjaro &lt;span class="caps"&gt;KDE&lt;/span&gt; in case you were&amp;nbsp;curious).&lt;/p&gt;
&lt;p&gt;Anyways, doing so made me install over and over again some packages and apps every single time. I know I could&amp;#8217;ve backed up the entire &lt;code&gt;/home&lt;/code&gt; partition but there were still some dependencies and libraries needed so instead of doing this repetitive process, figured I&amp;#8217;d use automation tools, like&amp;nbsp;ansible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, i came up with a list of everything i had installed already. Depending on your distro you can check your &lt;code&gt;/var/log/pacman.log&lt;/code&gt; or do an extract using &lt;code&gt;pacman -Ql.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next was to create a repo that would hold my special application configuration files as well as the playbooks so I can simply copy those into my new system and just run&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;Finally, create an ansible role structure for all the different things I&amp;#8217;ve wanted to install, I&amp;#8217;m a fan of keeping things tagged and organized as well as having some specific things installed in specific devices, like steam and my games are useless in my personal laptop so having things separated by roles helps a&amp;nbsp;ton.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With the list and structure ready, ended up with something like&amp;nbsp;this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;--- # Main playbook&lt;/span&gt;
&lt;span class="gd"&gt;- hosts: local&lt;/span&gt;
  gather_facts: no
  connection: local
  roles:
    - aur
    - base
    - python
    - games
    - pi
    - snaps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So all my tasks were separated based on the source or module being used by them. Do note that in my case since I&amp;#8217;m an Arch user, had to install a module for ansible in order for me to get things from the &lt;span class="caps"&gt;AUR&lt;/span&gt;. Ended up using &lt;a href="https://github.com/kewlfft/ansible-aur"&gt;&lt;code&gt;https://github.com/kewlfft/ansible-aur&lt;/code&gt;&lt;/a&gt;. The rest of the modules are built-in assuming you have Ansible&amp;nbsp;v2.8.&lt;/p&gt;
&lt;p&gt;All that was left was to define the tasks inside each role and start running things. If you want to see the full thing, refer to my &lt;a href="https://github.com/mvaldes14/dotfiles"&gt;dotfiles&lt;/a&gt;. But heres a brief example of what I consider my base&amp;nbsp;packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;--- # tasks file for base items&lt;/span&gt;
&lt;span class="gd"&gt;- name : Install applications from pacaur&lt;/span&gt;
  become: yes
  become_method: sudo
  pacman:
      name: &amp;#39;{{ item }}&amp;#39;
      state: present
  loop:
      - rofi
      - imagemagick
      - docker
      - jq
      - neovim
      - nodejs
      - npm
      - playerctl
      - vagrant
      - virtualbox
      - lxappearance
      - chromium
      - neofetch
      - postman-bin
      - rsync
      - rclone
      - spotify
      - visual-studio-code-bin
      - mpv
      - xclip
      - redshift
      - fzf
      - httpie
      - zeal
      - lastpass-cli
      - nmap
      - prettyping
      - bat
      - ncdu
      - python-pip
      - pavucontrol
      - pulseaudio-alsa
      - adobe-source-code-pro-fonts
      - noto-fonts-emoji
      - yay
      - dropbox
      - konsole
      - transmission-gtk
      - clementine
      - krusader
      - wps-office
      - zsh
      - go
      - terraform
      - firefox
      - filezilla
  tags:
      - arch-base
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing I would&amp;#8217;ve loved would be a way to run just specific roles but that seems to be not doable right now so we use the next best thing, tags in the playbook&amp;nbsp;tasks.&lt;/p&gt;
&lt;p&gt;So for example if i just want to run the playbook to install things from &lt;span class="caps"&gt;AUR&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- name: Install from AUR&lt;/span&gt;
&lt;span class="err"&gt;  aur:&lt;/span&gt;
&lt;span class="err"&gt;      use: yay&lt;/span&gt;
&lt;span class="err"&gt;      skip_installed: yes&lt;/span&gt;
&lt;span class="err"&gt;      aur_only: yes&lt;/span&gt;
&lt;span class="err"&gt;      name:&lt;/span&gt;
&lt;span class="err"&gt;      - ttf-font-awesome-4&lt;/span&gt;
&lt;span class="err"&gt;      - snapd&lt;/span&gt;
&lt;span class="err"&gt;      - ttf-material-design-icons&lt;/span&gt;
&lt;span class="err"&gt;      - mailspring&lt;/span&gt;
&lt;span class="err"&gt;      - wireshark-gtk&lt;/span&gt;
&lt;span class="err"&gt;      - android-studio&lt;/span&gt;
&lt;span class="err"&gt;      - bind&lt;/span&gt;
&lt;span class="err"&gt;      - slack-desktop&lt;/span&gt;
&lt;span class="err"&gt;      - discord&lt;/span&gt;
&lt;span class="err"&gt;      - tor-browser&lt;/span&gt;
&lt;span class="err"&gt;  tags:&lt;/span&gt;
&lt;span class="err"&gt;      - arch-aur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can be run with something&amp;nbsp;like..&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ansible-playbook main.yml -t arch-aur -K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking it&amp;nbsp;down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.yml&lt;/code&gt;: The name of the principal &lt;span class="caps"&gt;YML&lt;/span&gt; file that contains all&amp;nbsp;roles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; arch-aur: We specify that we only want to run the portion where the tag is&amp;nbsp;arch-aur.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-K&lt;/code&gt;: to provide our root password so that the administrative actions can take&amp;nbsp;place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple as that i can have a fully bootstrapped system ready to go in minutes, this project was extremely helpful for the distro hoping portion as mentioned in the beginning but since i moved away from windows on my laptop and honestly didn&amp;#8217;t want to spend a lot of time doing the whole thing, the playbook schema worked out perfectly. Also having the tags for different systems i could specify what to run&amp;nbsp;where.&lt;/p&gt;
&lt;p&gt;At this stage, the execution of those filters is done manually by using tags but you can improve on the playbook by comparing the name of the system and just executing certain roles based on conditions, in my case since i don&amp;#8217;t plan to do the installation for a while now i can live with manual portion. Next stop would be to find a way for me to keep the list updated every time i install something from either pacman, aur, snap, etc. Guess that will be the next project for the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Hope you liked it, see you next&amp;nbsp;time.&lt;/p&gt;</content><category term="devops"></category><category term="ansible"></category><category term="automation"></category><category term="lifehacks"></category></entry><entry><title>AnsibleÂ 101</title><link href="https://mvaldes14.github.io/blog/ansible-101.html" rel="alternate"></link><published>2019-01-18T00:00:00-06:00</published><updated>2019-01-18T00:00:00-06:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2019-01-18:/blog/ansible-101.html</id><summary type="html">&lt;p&gt;Ansible is my favorite configuration management tool, its uses &lt;span class="caps"&gt;YAML&lt;/span&gt; and Python, so you have a winning combo to begin with. One of the main things of why i enjoy using it, is basically that it doesnât require an installation on the target servers and that is a big factor that in my opinion defeats other management tools like Chef or&amp;nbsp;Puppet&amp;#8230;..&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ansible is my favorite configuration management tool, its uses &lt;span class="caps"&gt;YAML&lt;/span&gt; and Python, so you have a winning combo to begin with. One of the main things of why i enjoy using it, is basically that it doesnât require an installation on the target servers and that is a big factor that in my opinion defeats other management tools like Chef or&amp;nbsp;Puppet.&lt;/p&gt;
&lt;p&gt;The fact that you can run and configure servers without anything installed on them besides python (which is almost now standard on every single virtual/physical&amp;nbsp;machine).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Few things to&amp;nbsp;note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requires python on both master and client&amp;nbsp;machine&lt;/li&gt;
&lt;li&gt;Connects mostly over &lt;span class="caps"&gt;SSH&lt;/span&gt; so credential setup is&amp;nbsp;needed&lt;/li&gt;
&lt;li&gt;Uses or executes in sequence (top to&amp;nbsp;bottom)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we talked before, Ansible relies on &lt;span class="caps"&gt;YAML&lt;/span&gt;.
Yaml Aint Markup&amp;nbsp;Language&lt;/p&gt;
&lt;p&gt;Meant to be âhuman readableâ Perfect for the simplicity that involves ansible/python &lt;span class="caps"&gt;YAML&lt;/span&gt; uses a dictionary type of input information eg: key:value Name:&amp;nbsp;Mike&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt; Examples (not directly &lt;span class="caps"&gt;ANSIBLE&lt;/span&gt;&amp;nbsp;examples)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt; &lt;span class="c1"&gt;#Pending Items&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Visa Renewal&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;This is needed to renew your visa and this contains all of the information needed&lt;/span&gt;
&lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Important&lt;/span&gt;
&lt;span class="nt"&gt;Due&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Today&lt;/span&gt;
&lt;span class="nt"&gt;Followups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;CAS Appointment&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Date&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;April 30th&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Consulate&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Date&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;April 31st&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Same as with Python, indentation is critical for your &lt;span class="caps"&gt;YAML&lt;/span&gt;&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;To use ansible its as simple as: (process may be different based on your&amp;nbsp;distribution)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install ansible
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed you can start creating what we call âplaybooksâ, which is basically &lt;span class="caps"&gt;YAML&lt;/span&gt; instructions for Ansible to execute something. We will begin with the classic hello word. Create a file named&amp;nbsp;hello.yml.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello.yml&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt; &lt;span class="c1"&gt;# Hello World&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;localhost&lt;/span&gt;
&lt;span class="nt"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run your playbook execute the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ansible-playbook hello.yml&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Will produce the following output&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PLAY [localhost] *****************************************************************&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;TASK [Gathering Facts] ***********************************************************&lt;/span&gt;
&lt;span class="nt"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;localhost&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;TASK [debug] *********************************************************************&lt;/span&gt;
&lt;span class="nt"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;localhost&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;=&amp;gt; {&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;PLAY RECAP ***********************************************************************&lt;/span&gt;
&lt;span class="nt"&gt;localhost                  &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ok=2    changed=0    unreachable=0    failed=0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, running ansible playbooks is incredibly easy and of course there a lot more topics to cover for Ansible basics. If you want keep learning more, head over to the Ansible&amp;nbsp;Documentation.&lt;/p&gt;</content><category term="devops"></category><category term="ansible"></category><category term="devops"></category><category term="automation"></category></entry><entry><title>Use docker containers for your python flaskÂ apps</title><link href="https://mvaldes14.github.io/blog/docker-flask-apps.html" rel="alternate"></link><published>2018-12-07T00:00:00-06:00</published><updated>2018-12-07T00:00:00-06:00</updated><author><name>Miguel Valdes</name></author><id>tag:mvaldes14.github.io,2018-12-07:/blog/docker-flask-apps.html</id><summary type="html">&lt;p&gt;âve been recently using my work laptop to code while things are calm and Iâm waiting for the next fire to pop up (I work in production support). So once i installed everything I neededâ¦. python, git, vscode, nodejs, etc. Realized one big thing, everything works differently in windows and im already used to work in Linux &lt;span class="caps"&gt;OS&lt;/span&gt; systems and i cannot just switch the &lt;span class="caps"&gt;OS&lt;/span&gt; in my work laptop cause then the &lt;span class="caps"&gt;IT&lt;/span&gt; guys going to get me&amp;nbsp;fired..&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Make your apps easier to deploy and carry with&amp;nbsp;you&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Iâve been recently using my work laptop to code while things are calm and Iâm waiting for the next fire to pop up (I work in production support). So once i installed everything I neededâ¦. python, git, vscode, nodejs, etc. Realized one big thing, everything works differently in windows and im already used to work in Linux &lt;span class="caps"&gt;OS&lt;/span&gt; systems and i cannot just switch the &lt;span class="caps"&gt;OS&lt;/span&gt; in my work laptop cause then the &lt;span class="caps"&gt;IT&lt;/span&gt; guys going to get me&amp;nbsp;fired.&lt;/p&gt;
&lt;p&gt;So while looking at solutions to mitigate my situation, decided to force myself to use something new and exciting because it wouldâve been easy to just install Vagrant/VirtualBox and spin a machine to do my dev work but where is the fun in&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;Enter Dockerâ¦
In this new &lt;span class="caps"&gt;IT&lt;/span&gt; world where everything is moving towards containers and microservices, thought it would be a good idea to jump on the hype train and learn how to âdockerizeâ my flask applications. So I watched some videos and tutorials, read some of the documentation and did a test on a dummy application, so here we&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;Install Docker Engine First thing is of course installing Docker, now depending on your &lt;span class="caps"&gt;OS&lt;/span&gt; you can get it one way or another. Unless you have an enterprise need or license, go with the &lt;span class="caps"&gt;CE&lt;/span&gt; versions. Docker&amp;nbsp;install&lt;/p&gt;
&lt;p&gt;Create or use your application In my case, most of my applications were either running on my local rasperby pi at home or on heroku so I just decided to create a super simple dummy app that would display a picture and some&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;So once i created a new virtualenv using pipenv, my folder structure looked like&amp;nbsp;this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;Pipfile&lt;/span&gt;
&lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;Pipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;
&lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flask&lt;/span&gt;
    &lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
    &lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
        &lt;span class="err"&gt;âââ&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;app.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see an incredibly simple app that returns an even simpler&amp;nbsp;âindex.htmlâ.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ie=edge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;magenta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Document&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Docker&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Container python app &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.imagefully.com/wp-content/uploads/2015/08/Funny-Cats-Lol-Sup-Bro-Image.jpg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; Create your&amp;nbsp;Dockerfile &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, in order for you to interact with the Docker Engine you need to instruct docker how to build your image. An image can be seen as a snapshot of how something should look like including configurations, files, environment variables,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;This is the part were I got stuck the most since I had to read what the keywords do and how to interact with them, so if you want the reference for everything, check&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Will give you a summarized version of what I did for my personal&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;All dockerfiles must either be using an existing base image or using something from&amp;nbsp;scratch.&lt;/p&gt;
&lt;p&gt;Since the docker store already contains a bi-zillion images from official repos like Ubuntu, centos, nginx, mysql, etc. There should be no need for you to create something from scratch were you basically build the &lt;span class="caps"&gt;OS&lt;/span&gt; layers and everything. So in my case i went with a very simple Ubuntu&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;This is how you âinheritâ or use the base image from the docker&amp;nbsp;store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;FROM ubuntu:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to see all of the images in your system simply run the command docker images. In my case i downloaded and played around postgress as well so my output looked&amp;nbsp;like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;
&lt;span class="err"&gt;docker.io/ubuntu     latest              0458a4468cbc        12 days ago         111.7 MB&lt;/span&gt;
&lt;span class="err"&gt;docker.io/postgres   9.6-alpine          7470b931fc2e        4 weeks ago         37.82 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, an ubuntu image is 111.7 &lt;span class="caps"&gt;MB&lt;/span&gt; &lt;span class="caps"&gt;ONLY&lt;/span&gt;!!! - This to me is the beauty of the containers, incredibly light weight and super portable for you to carry around, if we were doing this with a Virtual Machine, we would be talking about gbs of&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Next command on a typical file are labels, which can contain anything you want, mostly used for&amp;nbsp;metadata.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LABEL&lt;/span&gt; maintainer=&amp;#8221;yourname&amp;#8221; version=&amp;#8221;1.0&amp;#8221; maintainer_email=&amp;#8221;youremail@mail.com&amp;#8221;
&lt;span class="caps"&gt;NOTE&lt;/span&gt;: Most images still use the deprecated keyword &lt;span class="caps"&gt;MAINTAINER&lt;/span&gt;. Ideally you want to use LABELs&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;Next command is super important as it allows you to specify what you want docker to do while building your image, this is where you typically install or do things on top of base&amp;nbsp;images.&lt;/p&gt;
&lt;p&gt;In my case I wanted to install pip and the build-essential bundle so I could run my flask&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;RUN apt-get update -y &amp;amp;&amp;amp; apt-get install -y python-pip python-dev build-essential&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ideally you want to âchainâ your commands using â&amp;amp;&amp;amp;â so you reduce the amount of layers it&amp;nbsp;generates.&lt;/p&gt;
&lt;p&gt;Once you have everything installed you want to move your application code into the image to be used, so in here based on what I read you can either use &lt;span class="caps"&gt;COPY&lt;/span&gt; or &lt;span class="caps"&gt;ADD&lt;/span&gt;. You might want to read the documentation to see which one to pick but based on this &lt;span class="caps"&gt;SO&lt;/span&gt; post. For basic data moving, either one will work just&amp;nbsp;fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;COPY ./python-flask/ /usr/src/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As most python applications, we requires modules and packages to run things, unless you are using the built-in library of course. But we doing flask, we big boys now so we need to install the packages and its dependencies. We simply add another layer that you will most likely&amp;nbsp;recognize.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;RUN pip install -r /usr/src/app/requirements.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We run it at this point since the files were just copied a line above. Remember our requirements.txt was inside the application folder. You can modify the structure and alter the layers but you need to install your requirements at some&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;Once everything is copied and installed we need to tell Docker where we will run our things, so we make use of &lt;span class="caps"&gt;WORKDIR&lt;/span&gt;. It basically sets the directory where you will run your commands from. If you are running a binary that is available in your $&lt;span class="caps"&gt;PATH&lt;/span&gt; then you may not need this but since i want to make sure my application launches and uses the code we copied above, I force the&amp;nbsp;location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;WORKDIR /usr/src/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A key thing with containers is that, they create and spawn the process you tell them to but if you need to interact with it, you need a port to talk to. So in our case, since by default all flask apps run on port 5000. We tell Docker that we want to expose that port in our image so we can actually interact with&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;EXPOSE 5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we run the&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;CMD [&amp;quot;flask&amp;quot;,&amp;quot;run&amp;quot;,&amp;quot;--host=0.0.0.0&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do note we are using &lt;span class="caps"&gt;CMD&lt;/span&gt; instead of &lt;span class="caps"&gt;RUN&lt;/span&gt;. This is because we just want this command to be executed as soon as the container is launched, in our case we use the preferred form (called exec) of separating items into a list. You can also use it in a shell form (without the list [] and â); Again for specifics the documentation does&amp;nbsp;wonders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build your image&lt;/strong&gt;
Once we have our files and structure ready, we need to build our image using the Dockerfile we&amp;nbsp;created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;âââ Dockerfile&lt;/span&gt;
&lt;span class="err"&gt;âââ Pipfile&lt;/span&gt;
&lt;span class="err"&gt;âââ Pipfile.lock&lt;/span&gt;
&lt;span class="err"&gt;âââ python-flask&lt;/span&gt;
&lt;span class="err"&gt;    âââ app.py&lt;/span&gt;
&lt;span class="err"&gt;    âââ requirements.txt&lt;/span&gt;
&lt;span class="err"&gt;    âââ templates&lt;/span&gt;
&lt;span class="err"&gt;        âââ index.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To build our image we interact with the docker &lt;span class="caps"&gt;API&lt;/span&gt;, or the &lt;span class="caps"&gt;CLI&lt;/span&gt; for mere mortals like meâ¦ By using the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker build -t flask .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things to note. -t &lt;span class="caps"&gt;TAG&lt;/span&gt; Name to use for your image, in my case Iâm saying flask so its easy to remember. . With the dot we specify that we want to build using the Dockerfile available in our current location, if you want to use the file from a different place just specify the&amp;nbsp;path.&lt;/p&gt;
&lt;p&gt;Once the process completes, if you re-run docker images you should see a new image in your&amp;nbsp;repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;
&lt;span class="err"&gt;flask                latest              5394dbc7f0eb        23 hours ago        424.6 MB&lt;/span&gt;
&lt;span class="err"&gt;docker.io/ubuntu     latest              0458a4468cbc        12 days ago         111.7 MB&lt;/span&gt;
&lt;span class="err"&gt;docker.io/postgres   9.6-alpine          7470b931fc2e        4 weeks ago         37.82 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, our image increased quite a bit, but even with that size it can be up and running in seconds. So remember, the more you install and add to it, the bigger it cause, duh logic&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run your image&lt;/strong&gt;
If you made it this far, good for you mate. We are almost done. To run our image we again interact with the &lt;span class="caps"&gt;CLI&lt;/span&gt; but in here we need to add some specific parameters to tell it where to put our port and give it a&amp;nbsp;name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker run -d \&lt;/span&gt;
&lt;span class="err"&gt;-p 80:5000 \&lt;/span&gt;
&lt;span class="err"&gt;--name flaskapp \&lt;/span&gt;
&lt;span class="err"&gt;-e FLASK_APP=&amp;#39;app.py&amp;#39; \&lt;/span&gt;
&lt;span class="err"&gt;flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above command should give you a container id, validate it is actually running by doing docker ps. Additionally you can see the usual flask logs by running docker logs &lt;IMAGENAME&gt;.&lt;/p&gt;
&lt;p&gt;Since we passed the &amp;#8212;name parameter, we just do docker logs flaskapp. And we get the&amp;nbsp;following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)&lt;/span&gt;
&lt;span class="err"&gt;24.28.147.10 - - [14/Feb/2018 17:00:43] &amp;quot;GET / HTTP/1.1&amp;quot; 200 -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is very important that the host is â0.0.0.0â otherwise you will not be able to access it from the outside. If you want to know why, check out this&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;Finally, if we hit the &lt;span class="caps"&gt;IP&lt;/span&gt; where the docker image is running, we should get our flask application. Questions? Concerns? Was this&amp;nbsp;cool?&lt;/p&gt;
&lt;p&gt;Let me know in the section below. Next time we will use the image to do live testing in our&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</content><category term="devops"></category><category term="devops"></category><category term="docker"></category><category term="python"></category><category term="flask"></category></entry></feed>